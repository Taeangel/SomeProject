//
//  MainViewControllerTests.swift
//  TodoVipApp
//
//  Created by song on 2023/04/11.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TodoVipApp
import XCTest

class MainViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: MainViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupMainViewController()
  }
  
  override func tearDown()
  {
    window = nil
    super.tearDown()
  }
  
  // MARK: mockData
  typealias DisplayedTodoList = MainScene.FetchTodoList.ViewModel.DisplayedTodo
  let displayTodoListMockData: [String: [DisplayedTodoList]] = [
    "2023-04-10": [DisplayedTodoList(id: 1,
                                     title: "첫번째",
                                     isDone: false,
                                     updatedTime: "08:51",
                                     updatedDate: "2023-04-10"),
                   DisplayedTodoList(id: 2,
                                     title: "두번째",
                                     isDone: false,
                                     updatedTime: "08:50",
                                     updatedDate: "2023-04-10")],
    "2023-04-11": [DisplayedTodoList(id: 3,
                                     title: "세번째",
                                     isDone: false,
                                     updatedTime: "08:50",
                                     updatedDate: "2023-04-11")],
    "2023-04-12": [DisplayedTodoList(id: 4,
                                     title: "네번째",
                                     isDone: false,
                                     updatedTime: "08:50",
                                     updatedDate: "2023-04-12")]
  ]
  
  let mockSection: [String] = ["2023-04-10", "2023-04-11", "2023-04-12"]
  
  // MARK: Test setup
  
  func setupMainViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "MainViewController") as? MainViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class MainBusinessLogicSpy: MainBusinessLogic
  {
    var fetchTodoListCalled = false
    var deleteTodoCalled = false
    var fetchSearchTodoListCalled = false
    var checkTodoCalled = false
    
    func fetchTodoList(request: MainScene.FetchTodoList.Request) {
      fetchTodoListCalled = true
    }
    func deleteTodo(request: MainScene.DeleteTodo.Request) {
      deleteTodoCalled = true
    }
    func fetchSearchTodoList(request: MainScene.FetchSearchTodoList.Request) {
      fetchSearchTodoListCalled = true
    }
    func checkTodo(request: MainScene.ModifyTodo.Request) {
      checkTodoCalled = true
    }
    
  }
  
  // MARK: Tests
  
  func test_시작할때메서드가불리는지() {
    // Given
    let spy = MainBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.fetchTodoListCalled)
  }
  
  func test_시작할때presenter로부터데이터를제대로받는지() {
    // Given
    let viewModel = MainScene.FetchTodoList.ViewModel(page: 1, displayedTodoList: displayTodoListMockData, sections: mockSection)
    
    // When
    loadView()
    sut.displayTodoList(viewModel: viewModel)
    
    // Then
    XCTAssertEqual(sut.sections.count, self.mockSection.count)
    XCTAssertEqual(sut.todoList.count, self.displayTodoListMockData.count)
    XCTAssertEqual(sut.todoList[self.mockSection.first!]?.count, self.displayTodoListMockData[self.mockSection.first!]?.count)
  }
  
  func test_새로고침할때메서드가불리는지() {
    // Given
    let spy = MainBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    sut.refreshFunction()
    // Then
    XCTAssertTrue(spy.fetchTodoListCalled)
  }
  
  func test_새로고침할때resenter로부터데이터를제대로받는지() {
    // Given
    let viewModel = MainScene.FetchTodoList.ViewModel(page: 1, displayedTodoList: displayTodoListMockData, sections: mockSection)
    
    // When
    loadView()
    sut.displayTodoList(viewModel: viewModel)
    
    //     Then
    XCTAssertEqual(sut.sections.count, self.mockSection.count)
    XCTAssertEqual(sut.todoList.count, self.displayTodoListMockData.count)
    XCTAssertEqual(sut.todoList[self.mockSection.first!]?.count, self.displayTodoListMockData[self.mockSection.first!]?.count)
  }
}
