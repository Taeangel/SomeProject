//
//  MainInteractor.swift
//  TodoVipApp
//
//  Created by song on 2023/03/24.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic
{
  func fetchTodoList(request: FetchListRequestProtocol)
  func deleteTodo(request: MainScene.DeleteTodo.Request)
  func modifyTodo(request: MainScene.ModifyTodo.Request)
}

protocol MainDataStore
{
  var sections: [String] { get set }
  var storedTodoList: [TodoEntity] { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore
{
  var sections: [String] = []
  var storedTodoList: [TodoEntity] = []
  var todoList: [String: [TodoEntity]] = [:]
  var presenter: MainPresentationLogic?
  var worker: MainWorker?
  var session: Requestable
  
  // MARK: - NotificationCenter
  
  init(session: Requestable = URLSession.shared) {
    self.session = session
    NotificationCenter.default.addObserver(self, selector: #selector(addNotiTodo), name: NSNotification.Name("addTodo"), object: nil)
    NotificationCenter.default.addObserver(self, selector: #selector(modifyNotiTodo), name: NSNotification.Name("modifyTodo"), object: nil)
  }
  
  // MARK: 뷰에서 인터렉터한테 시키는 메서드
  
  @objc func addNotiTodo(_ notification: Notification) {
    guard let todoEntity = notification.object as? TodoEntity else {
      return
    }
    
    if sections.filter ({ $0 == todoEntity.updatedDate }).isEmpty {
      self.todoList.updateValue([todoEntity], forKey: todoEntity.updatedDate)
    } else {
      self.todoList[todoEntity.updatedDate]?.insert(todoEntity, at: 0)
    }
    
    let response = MainScene.AddTodo.Response(todoList: self.todoList)
    presenter?.presesntAddTodo(response: response)
  }
  
  @objc func modifyNotiTodo(_ notification: Notification) {
    guard let todoEntity = notification.object as? TodoEntity else {
      return
    }
    
    let storedTodoEntity = self.todoList.flatMap { $1.filter { $0.id == todoEntity.id  } }.first
    let rows = self.todoList[storedTodoEntity?.updatedDate ?? ""]
    
    guard let sectionIndex = self.sections.firstIndex(of: storedTodoEntity?.updatedDate ?? ""),
          let rowIndex = rows?.firstIndex(where: { $0.id == storedTodoEntity?.id }) else {
      return
    }
    
    let indexPath = IndexPath(row: rowIndex, section: sectionIndex)
    self.todoList[sections[sectionIndex]]?[rowIndex] = todoEntity
    
    let response = MainScene.ModifyTodo.Response(indexPath: indexPath, todoEntity: todoEntity)
    presenter?.presentModifyTodo(response: response)
  }
  
  func fetchTodoList(request: FetchListRequestProtocol) {
    worker = MainWorker(reauestable: session)
    Task{
      do {
        var todoList: TodoListEntity?
        todoList = try await typeCheckRequestAPI(request: request)
        guard let meta = todoList?.meta else { return }
        
        if request.page == 1 {
          self.storedTodoList = todoList?.todoEntity ?? []
          self.todoList = Dictionary(grouping: self.storedTodoList ) { $0.updatedDate }
        } else {
          self.storedTodoList += todoList?.todoEntity ?? []
          self.todoList = Dictionary(grouping: self.storedTodoList ) { $0.updatedDate }
        }

        self.todoList.keys.sorted().forEach { sections.append($0) }
        sections.reverse()
        
        let response = MainScene.FetchTodoList.Response(todoList: self.todoList, page: meta.currentPage ?? 1, isFetch: meta.isfetch)
        
        presenter?.presentTodoList(response: response)
      } catch {
        let response = MainScene.FetchTodoList.Response(error: error as? NetworkError, page: request.page)
        
        presenter?.presentTodoList(response: response)
      }
    }
  }
  
  
  func deleteTodo(request: MainScene.DeleteTodo.Request)  {
    worker = MainWorker(reauestable: session)
    Task {
      do {
        let todoEntity = try await self.worker?.deleteTodo(id: request.id)
        let storedTodoEntity = self.todoList.flatMap { $1.filter { $0.id == todoEntity?.id  } }.first
        let rows = self.todoList[storedTodoEntity?.updatedDate ?? ""]
        
        guard let sectionIndex = self.sections.firstIndex(of: storedTodoEntity?.updatedDate ?? ""),
              let rowIndex = rows?.firstIndex(where: { $0.id == storedTodoEntity?.id }) else {
          return
        }
        let indexPath = IndexPath(row: rowIndex, section: sectionIndex)
        
        self.todoList[sections[sectionIndex]]?.remove(at: rowIndex)
        
        let response = MainScene.DeleteTodo.Response(indexPath: indexPath)
        presenter?.presentDeleteTodo(response: response)
      } catch {
        let response = MainScene.DeleteTodo.Response(error: error)
        presenter?.presentDeleteTodo(response: response)
      }
    }
  }
  
  func modifyTodo(request: MainScene.ModifyTodo.Request) {
    worker = MainWorker(reauestable: session)
    Task {
      do {
        
        let todoEntity = try await self.worker?.checkisDone(id: request.id, title: request.title, isDone: request.isDone)
        let storedTodoEntity = self.todoList.flatMap { $1.filter { $0.id == todoEntity?.id  } }.first
        let rows = self.todoList[storedTodoEntity?.updatedDate ?? ""]
        
        guard let sectionIndex = self.sections.firstIndex(of: storedTodoEntity?.updatedDate ?? "") else {
          return
        }
        
        guard let rowIndex = rows?.firstIndex(where: { $0.id == storedTodoEntity?.id }) else {
          return
        }
        
        let indexPath = IndexPath(row: rowIndex, section: sectionIndex)
        self.todoList[sections[sectionIndex]]?[rowIndex].isDone = request.isDone
        
        let response = MainScene.ModifyTodo.Response(indexPath: indexPath, todoEntity: todoEntity)
        presenter?.presentModifyTodo(response: response)
      } catch {
        let response = MainScene.ModifyTodo.Response(error: error)
        presenter?.presentModifyTodo(response: response)
      }
    }
  }
  
  fileprivate func typeCheckRequestAPI(request: FetchListRequestProtocol) async throws -> TodoListEntity? {
    switch request {
    case is MainScene.FetchTodoList.Request:
      return try await self.worker?.fetchTodoList(page: request.page, perPage: request.perPage)
    case is MainScene.FetchSearchTodoList.Request:
      return try await self.worker?.fetchSearchTodoList(page: request.page, perPage: request.perPage, query: request.quary ?? "")
    default:
      return nil
    }
  }
}
