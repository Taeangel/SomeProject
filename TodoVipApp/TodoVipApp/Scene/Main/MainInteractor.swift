//
//  MainInteractor.swift
//  TodoVipApp
//
//  Created by song on 2023/03/24.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic
{
  func fetchTodoList(request: MainScene.FetchTodoList.Request) async throws
  func deleteTodo(request: MainScene.DeleteTodo.Request) async throws
  func fetchSearchTodoList(request: MainScene.FetchSearchTodoList.Request) async throws
}

protocol MainDataStore
{
  var todoList: [TodoEntity] { get set }
  var sectionInfo: [Int] { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore
{
 
  var sectionInfo: [Int] = []
  var todoList: [TodoEntity] = []
  var presenter: MainPresentationLogic?
  var worker: MainWorker?
  
  // MARK: Do something
  
  // 뷰에서 인터렉터한테 시키는 메서드
  
  func fetchTodoList(request: MainScene.FetchTodoList.Request) async throws {
    worker = MainWorker()
    guard let todoList = try await worker?.fetchTodoList(page: request.page, perPage: request.perPage) else { return }
    
    // 데이터 보관
    let sections = todoList
      .map { "\($0.updatedAt?.prefix(10) ?? "")" }
      .removeDuplicates()

    let sectionsNumber = todoList
      .map { "\($0.updatedAt?.prefix(10) ?? "")" }
    
    if request.page == 1 {
      self.sectionInfo = sections.map { standard in
        sectionsNumber.filter { target in
          standard == target
        }.count
      }
      self.todoList = todoList
    } else {
      
      self.sectionInfo += sections.map { standard in
        sectionsNumber.filter { target in
          standard == target
        }.count
      }
      self.todoList += todoList
    }
    
    // 데이터 전달
    let response = MainScene.FetchTodoList.Response(todoList: self.todoList)
    presenter?.presentTodoList(response: response)
  }
  
  func deleteTodo(request: MainScene.DeleteTodo.Request) async throws {
    worker = MainWorker()
    try await worker?.deleteTodo(id: request.id)
  }
  
  func fetchSearchTodoList(request: MainScene.FetchSearchTodoList.Request) async throws {
    worker = MainWorker()
    guard let todoList = try await worker?.fetchSearchTodoList(page: request.page, perPage: request.perPage, query: request.quary) else {
      return
    }
    
    let response = MainScene.FetchSearchTodoList.Response(todoList: todoList)
    presenter?.presentTodoList(response: response)
    
    // 데이터 보관
    let sections = todoList
      .map { "\($0.updatedAt?.prefix(10) ?? "")" }
      .removeDuplicates()

    let sectionsNumber = todoList
      .map { "\($0.updatedAt?.prefix(10) ?? "")" }
    
    self.sectionInfo = sections.map { standard in
      sectionsNumber.filter { target in
        standard == target
      }.count
    }
    self.todoList = todoList
  }
}
