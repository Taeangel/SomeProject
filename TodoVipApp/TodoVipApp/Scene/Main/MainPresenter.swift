//
//  MainPresenter.swift
//  TodoVipApp
//
//  Created by song on 2023/03/24.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainPresentationLogic
{
  func presentTodoList(response: TodoListProtocol)
  func updatePage(response: UpdateResponsePage)
}

class MainPresenter: MainPresentationLogic
{
  
  weak var viewController: MainDisplayLogic?
  
  // MARK: Do something
  
  //인터렉터한테 받은 날것의 데이터를 받음
  
  func presentTodoList(response: TodoListProtocol) {
    typealias DisplayedTodoList = MainScene.FetchTodoList.ViewModel.DisplayedTodo
    
    guard let responseTodoList = response.todoList else { return }
    
    let displayedTodoList = responseTodoList.map { todoEntity -> DisplayedTodoList in
      
      guard let findDateT = todoEntity.updatedAt?.firstIndex(of: "T"),
            let findDateDot = todoEntity.updatedAt?.firstIndex(of: ".") else {
        return DisplayedTodoList(id: 0, title: "", isDone: false, updatedTime: "", updatedDate: "")
      }
      
      guard var updatedDate = todoEntity.updatedAt?[...findDateT],
            var updatedTime = todoEntity.updatedAt?[findDateT...findDateDot] else {
        return DisplayedTodoList(id: 0, title: "", isDone: false, updatedTime: "", updatedDate: "")
      }
      
      updatedDate.removeLast()
      updatedTime.removeFirst()
      
      return  DisplayedTodoList(
        id: todoEntity.id ?? 1,
        title: todoEntity.title ?? "",
        isDone: todoEntity.isDone ?? false,
        updatedTime: "\(updatedTime.prefix(5))",
        updatedDate: "\(updatedDate)"
      )
    }
    
    let groupedTodoList = Dictionary(grouping: displayedTodoList) { $0.updatedDate }
    var sections: [String] = []
    
    groupedTodoList.keys.sorted().forEach { sections.append($0) }
    sections.reverse()
    
    let nowPage = response.page
    let viewModel = MainScene.FetchTodoList.ViewModel(error: response.error as? NetworkError, page: nowPage + 1, displayedTodoList: groupedTodoList, sections: sections)
    viewController?.displayTodoList(viewModel: viewModel)
  }
  
  func updatePage(response: UpdateResponsePage) {
    let viewModel = MainScene.UpdatePageViewModel(page: response.page, error: response.error as? NetworkError)
    viewController?.updatePage(viewModel: viewModel)
  }
}
