//
//  MainModels.swift
//  TodoVipApp
//
//  Created by song on 2023/03/24.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum MainScene
{
  
  // MARK: - CheckBoxModify
  enum CheckBoxTodo
  {
    struct Request // 뷰가 인터렉터한테 요청하는 데이터
    {
      var page: Int = 1
      var id: Int
      var title: String
      var isDone: Bool
    }
    struct Response //워커에서 들어온 데이터 - 날것의 데이터
    {
      var error: Error?
      var page: Int
    }
    
    struct ViewModel // 업데이트Page
    {
      var page: Int
      var error: NetworkError?
    }
  }
  
  // MARK: - FetchSearchTodoList

  enum FetchSearchTodoList
  {
    struct Request // 뷰가 인터렉터한테 요청하는 데이터
    {
      var quary: String
      var page: Int = 1
      var perPage: Int = 10
    }
    struct Response: TodoListProtocol //워커에서 들어온 데이터 - 날것의 데이터
    {
      var error: Error?
      var todoList: [TodoEntity]?
      var page: Int
    }
    struct ViewModel // 프리젠터가 뷰에 전달하는 데이터
    {
      struct DisplayedTodo: Hashable {
        let id: Int
        let title: String
        let isDone: Bool
        let createdTime: String
        let createdDate: String
      }
      
      var error: NetworkError?
      var page: Int
      var displayedTodoList: [DisplayedTodo]
    }
  }
  
  // MARK: - DeleteTodo
  
  enum DeleteTodo
  {
    struct Request // 뷰가 인터렉터한테 요청하는 데이터
    {
      var page: Int = 1
      var id: Int
    }
    struct Response //워커에서 들어온 데이터 - 날것의 데이터
    {
      var id: Int?
      var error: Error?
      var page: Int
    }
    struct ViewModel // 업데이트Page
    {
      var page: Int
      var error: NetworkError?
    }
  }
  
  // MARK: - FetchTodoList
  
  enum FetchTodoList
  {
    struct Request // 뷰가 인터렉터한테 요청하는 데이터
    {
      var page: Int = 1
      var perPage: Int = 10
    }
    struct Response: TodoListProtocol //워커에서 들어온 데이터 - 날것의 데이터
    {
      var error: Error?
      var todoList: [TodoEntity]?
      var page: Int
    }
    struct ViewModel // 프리젠터가 뷰에 전달하는 데이터
    {
      struct DisplayedTodo: Hashable {
        let id: Int
        let title: String
        let isDone: Bool
        let updatedTime: String
        let updatedDate: String
      }
      var error: NetworkError?
      var page: Int
      var displayedTodoList: [String: [DisplayedTodo]]
      var sections: [String]
    }
  }
  
  struct ViewModel // 업데이트Page
  {
    var page: Int
    var error: NetworkError?
  }
}

protocol TodoListProtocol {
  var todoList: [TodoEntity]? { get set }
  var error: Error? { get set }
  var page: Int { get set }
}

//protocol UpdateResponsePage {
// 
//}
//
//protocol UpdateViewModelPage {
//  var page: Int { get set }
//  var error: NetworkError? { get set }
//}
